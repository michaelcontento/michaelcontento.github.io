[{"categories":null,"contents":"The other day I encountered a fun little problem while trying to import a large git repository into Azure DevOps:\nVery large pushes use up a lot of resources, blocking or slowing other parts of the service. Such pushes often don\u0026rsquo;t map to normal software development activities. Someone may have inadvertently checked in build outputs or a VM image, for example. For these reasons and more, pushes are limited to 5GB at a time.\n\u0026ndash; Azure DevOps Documentation (emphasis mine)\nSo, well .. this sucks as my repository at hand is way bigger than 5GB :cry:\n:x: Solution: Web Import What does Microsoft suggest as a solution? Just import the git repository via the web import feature!\nSadly this was not an option as the source git repository is not directly accessible by Azure DevOps :cry: :cry:\n:white_check_mark: Solution: Chunked git push Well, as you might have noticed only a single push can not exceed the 5GB limit as the repository itself can easily grow up to 250GB.\nHa! Now we have an angle of attack! We simply push our repository in small chunks, ensure that we never exceed the limit for a single git push and some time later we should arrive at the current HEAD :sunglasses:\nAnd with the power of bash the whole taks was as simple as:\n$ # Ensure we\u0026#39;re starting from the master branch $ git checkout master $ # First we need to count the total amount of commits $ TOTAL_COMMITS=$(git log --pretty=oneline | wc -l) $ # How many commits should be in a single chunk? $ COMMITS_PER_CHUNK=50 $ # Push our commits in small chunks $ for CURSOR in $(seq $TOTAL_COMMITS -$COMMITS_PER_CHUNK 0); do \\ git push origin master~$CURSOR:master; \\ done $ # And finally push the missing rest (tags, etc.) $ git push --mirror origin In my case it was enought to run this once on the master branch, as the final git push --mirror will push everything else (tags and all other branches).\n:bell: Warning :bell:\nThe last git push --mirror might also run into the same 5GB limit if you have a lot and/or big commits outside the master branch! If so, just repeat the steps from above until git push --mirror also stays within the limit.\n","date":"20 Oct, 2022","image":"\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://www.michaelcontento.de/blog-2022-11.png\" alt=\"\" class=\"w-100 img-fluid rounded\" height=\"\" width=\"\"\u003e\n","permalink":"https://www.michaelcontento.de/en/blog/2022/10/20/chunked-git-push-into-azure-devops/","tags":["Git","Azure DevOps","Azure"],"title":"Chunked git-push into Azure DevOps"},{"categories":null,"contents":":trophy: Credly \u0026hellip; who? Have you ever heared about the certification sharing platform Credly? It\u0026rsquo;s a very simple site, with a simple interface that solves a very simple issue: Collecting and showing of certifications in a reliably and trusted way.\nWhat does this mean? It simply means that Credly maintains the connection with all the organizations that issue certifications (like Microsoft, GitHub and many more). With this you could easily visit my person at Credly and see all certifications that I earned. Additionally you could verify the badge I claim and all those informations are available in a well defined JSON format.\n:light_bulb: Idea for automation Cool! But why do I tell you this?\nSimply because I wanted to list and/or show off all my certificates on this blog without having to sync them manually all the time (because \u0026hellip; well \u0026hellip; I\u0026rsquo;m a lazy developer :joy:).\n:gear: Architecture So with this clear problem at hand, let me show you a short overview about all the loose parts at hand:\n%%{init: {'theme':'neutral'}}%% flowchart TB HugoBuild[[hugo build]] Credly[(Credly)] GitRepo[(Git Repo\nBranch: main)] GitHubPages([GitHub Pages]) GitHubPagesA([GitHub Pages]) GitGhPages[(Git Repo\nBranch: gh-pages)] subgraph d[\"(3) Customer\"] direction TB Visitor -- Visits --\u003e GitHubPagesA; end subgraph c[\"(2) Build\"] direction TB GitRepo -- On every push --\u003e HugoBuild; HugoBuild -- git add --\u003e GitGhPages; GitGhPages -- Deploy --\u003e GitHubPages; end subgraph a[\"(1) Certification\"] direction TB User -- Earn certification --\u003e Organization; Organization -- Report certifications --\u003e Credly; end style a fill:none style c fill:none style d fill:none So looking at the diagram above we can conclude that we have three loosly coupled tasks / workflows / silos:\n(1) Certifications A user (like me) earns certifications at an organization (like Microsoft) Once earned, the certification gets pushed to Credly (2) Website This blog is built with Hugo and stored on GitHub Every push to the main branch will trigger an GitHub Action, that in turn runs hugo build and publishes the build results to a dedicated gh-pages branch GitHub Pages detects every change within gh-pages and publishes it to the \u0026ldquo;GitHub Cloud\u0026rdquo; (3) Customer My DNS (hosted at Gandi btw.) points to the \u0026ldquo;GitHub Cloud\u0026rdquo; Users (or their browsers) will fetch the final website from the \u0026ldquo;GitHub Cloud\u0026rdquo; This is all fine and also allows us to pretty easily extend in all dimensions. My idea here is to introduce a new loosly coupled GitHub Actions workflow that, on a regular basis, fetches all my certificates from Credly and stores the information in Git. With this in place, any change on Credly would be reflected within our Git repository (and in turn trigger a re-build and publish automatically). Pretty nice, isn\u0026rsquo;t it?\nSo the final desired state diagram would look something like this:\n%%{init: {'theme':'neutral'}}%% flowchart TB BadgeJson{{Metadata JSON}} BadgeImages{{Badge images}} ActionCredly[[New GitHub Action]] CredlyA[(Credly)] GitRepoA[(Git Repo\nBranch: main)] subgraph b[\"(4) Credly Import\"] direction TB CredlyA -. Fetch data .-\u003e ActionCredly; ActionCredly -- Generates --\u003e BadgeJson; ActionCredly -- Stores --\u003e BadgeImages; BadgeJson -- git add --\u003e GitRepoA; BadgeImages -- git add --\u003e GitRepoA; end style b fill:#c0f1ff %% ---------------------------------------------------- %% CODE FROM ABOVE %% ---------------------------------------------------- HugoBuild[[hugo build]] Credly[(Credly)] GitRepo[(Git Repo\nBranch: main)] GitHubPages([GitHub Pages]) GitHubPagesA([GitHub Pages]) GitGhPages[(Git Repo\nBranch: gh-pages)] subgraph d[\"(3) Customer\"] direction TB Visitor -- Visits --\u003e GitHubPagesA; end subgraph c[\"(2) Build\"] direction TB GitRepo -- On every push --\u003e HugoBuild; HugoBuild -- git add --\u003e GitGhPages; GitGhPages -- Deploy --\u003e GitHubPages; end subgraph a[\"(1) Certification\"] direction TB User -- Earn certification --\u003e Organization; Organization -- Report certifications --\u003e Credly; end style a fill:none style c fill:none style d fill:none As you can see above we changed nothing on the existing workflows / interactions. We simply added a whole new workflow that will import the Credly files into our own repository. And, by design, any change to our repository will trigger a re-build and re-deploy of our website. :sign_of_the_horns:\n:rocket: Implementation But how do we implement such a step? My solution consists of two parts that play together nicely.\n:one: Collecting data with Credly2Hugo This new GitHub Action collects all the required informations from Credly. It\u0026rsquo;s rather easy to use as most parameters are optional, and all you have to do is:\n# Add this step in one of your GitHub Workflow files - uses: michaelcontento/credly2hugo-action@v1 with: # The user of whom we want to grab the infos name: michael-contento This will in turn create the following files:\ndata/CredlyBadges.json with a Hugo optimized metadata JSON data/CredlyBadgesRaw.json with a raw metadata JSON from Credly assets/images/CredlyBadges/* where all individual badge images are stored With this we have all informations from Credly successfully imported into our own Git repository and we can start using them as we like.\n:sparkles: Notice :sparkles:\nHave a look at the workflow file of this blog for a full example.\nIf you want to know how the Credly2Hugo works, simply look at the source code. It\u0026rsquo;s nothing special and just some curl for data retrieval and jq to create the Hugo optimized metadata JSON file.\n:two: Using it in Hugo So now we have all informations stored in our repository - nice! But how do we access them? Thanks to Hugo Data Templates this is as easy as:\n// Iterate over our hugo optimized metadata file {{ range .Site.Data.CredlyBadges }} // give the current record a name for readability in the following \u0026lt;img\u0026gt; {{ $credly := . }} // let Hugo grab the image and resize it {{ $image := (resources.Get .LocalImagePath).Resize \u0026#34;150x150\u0026#34; }} // and simply render our bage as plain html image \u0026lt;img src=\u0026#34;{{ $image.RelPermalink }}\u0026#34; width=\u0026#34;{{ $image.Width }}\u0026#34; height=\u0026#34;{{ $image.Height }}\u0026#34; alt=\u0026#34;{{ $credly.Description }}\u0026#34;\u0026gt; {{ end }} Which will result in:\n:tada: Tada! :tada: :chequered_flag: Conclusion We have rendered our badges dynamically on our page, without having to manually import them every time we earn a new badge and without having to use some kind of dynamic client side javascript.\nEverything is pure Hugo Server Side Rendering :sunglasses:\nAnd everything is automated in code as GitHub Actions, everything is stored in Git and, a very small but nice goodie, we get a \u0026ldquo;badge earning history\u0026rdquo; for free as well :joy:\n","date":"19 Oct, 2022","image":"\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://www.michaelcontento.de/blog-2022-10.png\" alt=\"\" class=\"w-100 img-fluid rounded\" height=\"\" width=\"\"\u003e\n","permalink":"https://www.michaelcontento.de/en/blog/2022/10/19/scraping-credly-with-github-actions/","tags":["github action","credly","microsoft"],"title":"Scraping Credly with GitHub Actions"},{"categories":null,"contents":"After 20 months at Sprengnetter and a month vacation, I can now happily announce: As of today, I\u0026rsquo;m part of Xpirit :sunglasses:\nI am very excited to join this team of highly experienced consultants, experts in cloud transformation with Microsoft Azure, building high-performance IT teams with DevOps and developing cloud-native software.\nWith this step I\u0026rsquo;m now all-in on Microsoft, C# and Azure. PHP has been with me for many many years, but a breath of fresh air in the \u0026ldquo;personal tech stack\u0026rdquo; revitalizes the mind and soul :angel:\nOh! Xpirit continues to grow and if you are interested just have a look here.\n","date":"01 Sep, 2022","image":"\n\n\n\n\n\n\n\n\n\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://www.michaelcontento.de/blog-2022-09.png\" alt=\"\" class=\"w-100 img-fluid rounded\" height=\"\" width=\"\"\u003e\n","permalink":"https://www.michaelcontento.de/en/blog/2022/09/01/new-job-xpirit/","tags":["xpirit","career update"],"title":"New Job? Xpirit!"}]